---
- name: 'gather os specific variables'
  ansible.builtin.include_vars: "{{ vars_file }}"
  loop:
    - 'default.yml'
    - "{{ ansible_facts['os_family'] | lower }}.yml"
    - "{{ ansible_facts['distribution'] | lower }}.yml"
    - "{{ ansible_facts['distribution'] | lower }}-{{ ansible_facts['distribution_major_version'] }}.yml"
    - "{{ ansible_facts['distribution'] | lower }}-{{ ansible_facts['distribution_version'] }}.yml"
  loop_control:
    loop_var: vars_file
  when: "(vars_file is ansible.builtin.abs and vars_file is ansible.builtin.file) or (vars_file is not ansible.builtin.abs and (role_path ~ '/vars/' ~ vars_file) is ansible.builtin.file)"

- ansible.builtin.include_tasks: combine_list.yml
  loop:
    - 'iptables_accept_ip_input'
    - 'iptables_block_ip_input'
    - 'iptables_accept_ip_output'
    - 'iptables_block_ip_output'
    - 'iptables_accept_tcp_input'
    - 'iptables_block_tcp_input'
    - 'iptables_accept_udp_input'
    - 'iptables_block_udp_input'
    - 'iptables_accept_tcp_output'
    - 'iptables_block_tcp_output'
    - 'iptables_accept_udp_output'
    - 'iptables_block_udp_output'
    - 'iptables_unrestricted_users'
    - 'iptables_unrestricted_groups'
    - 'iptables_custom_input_rules'
    - 'iptables_custom_output_rules'
  loop_control:
    loop_var: var_name
  when: "lookup('vars', var_name, default=false) == false"

- name: 'install required software'
  ansible.builtin.package:
    name: "{{ iptables_packages | select }}"
    state: present

- name: 'create /usr/local/sbin/'
  ansible.builtin.file:
    path: '/usr/local/sbin/'
    state: directory
    owner: root
    mode: 0755

- name: 'install iptables setup script'
  ansible.builtin.template:
    src: 'firewall.sh.j2'
    dest: '/usr/local/sbin/firewall.sh'
    owner: root
    group: root
    mode: 0755
  register: _iptables_script

- name: 'activate and persist rules'
  ansible.builtin.command: "{{ item }}"
  async: 12
  poll: 1
  when: "_iptables_script is ansible.builtin.changed"
  loop:
    - '/usr/local/sbin/firewall.sh restart'
    - '/usr/local/sbin/firewall.sh save'

- name: 'enable and start'
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: true
    state: "{{ ansible_facts['is_chroot'] | ansible.builtin.ternary(omit, 'started') }}"
  loop: "{{ iptables_services }}"
